on:
  workflow_call:
    inputs:
      java-version:
        required: true
        type: number
      working-directory:
        required: true
        type: string
      docker-repo:
        required: true
        type: string
      build-args:
        required: false
        type: string
        default: build --scan sonarqube --info

    outputs:
      tag-to-deploy:
        description: "Published image tag for immediate deployment"
        value: ${{ jobs.common-java-app-build.outputs.tag-to-deploy }}

jobs:
  common-java-app-build:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    outputs:
      tag-to-deploy: ${{ steps.output-docker-tag.outputs.TAG_TO_DEPLOY }}

    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK
        uses: actions/setup-java@v4.0.0
        with:
          distribution: 'corretto'
          java-version: ${{ inputs.java-version }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.1.0

      - name: Cache SonarCloud packages
        uses: actions/cache@v3.3.2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Gradle build, analyze and publish
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: ${{ inputs.working-directory }}
          arguments: ${{ inputs.build-args }}
        env:
          # env vars for access to github-packages
          GITHUB_USERNAME: readonly@powerex.io
          PERSONAL_ACCESS_TOKEN_GITHUB: ${{ secrets.ACCESS_TOKEN_GITHUB }}
          # env vars for sonar
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.12.0
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          junit_files: ${{ inputs.working-directory }}/build/test-results/**/*.xml

      - name: Set docker tag
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/master' || ${{ github.ref }} == 'refs/heads/main' ]]; then
            # set tags as env vars in current runner
            echo "TAG=latest,prod_$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          else
            # set tags as env vars in current runner
            echo "TAG=$(echo test-deploy_${{ github.head_ref }} | tr -s '/' '_' | tr -s '#' '_' )" >> "$GITHUB_ENV"
          fi

      - name: Docker build and push
        uses: kciter/aws-ecr-action@v4
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          repo: ${{ inputs.docker-repo }}
          region: eu-central-1
          tags: ${{ env.TAG }}
          dockerfile: "${{ inputs.working-directory }}/Dockerfile"
          create_repo: false
          set_repo_policy: false
          repo_policy_file: repo-policy.json
          path: ${{ inputs.working-directory }}

      # can`t do this in step 'Set docker tag' because for some reason env.TAG is empty - probably is filled after the step is finished
      - name: Show published docker image tag and set it as output of job
        id: output-docker-tag
        run: |
          echo "following tags for docker image: ${{ env.TAG }} were pushed"

          # set output tag from job, going for real tag 'test_deploy_*', or 'prod_*' not 'latest'
          echo "TAG_TO_DEPLOY=$( echo  ${{ env.TAG }} | cut -d ',' -f 2)" >> "$GITHUB_OUTPUT"

      - name: Create summary
        run: |
          # create job summary
          echo "### \#\# pushed tags: '${{ env.TAG }}' to aws ecr registry" >> $GITHUB_STEP_SUMMARY
          echo "### \#\# " >> $GITHUB_STEP_SUMMARY
          echo "### \#\# going to use following tag: '${{ steps.output-docker-tag.outputs.TAG_TO_DEPLOY }}' for deployment" >> $GITHUB_STEP_SUMMARY
